### Kube cluster build for:
# Debian 12
# K8s version 1.30
# docker 5:27.0.3-1
# containerd 1.7.18-1
# Calico (CNI/Networking)
# Ceph (Storage Solution)

### Server User Account (Non-root)
SVR_USER="dev"

### Kube boostrap ip range
KUBE_CIDR="172.31.0.0/16"

##############################################  the basics  ############################################

# Switch to root
su -

##  Basic stuff  ##
apt update
apt install -y nala && nala upgrade
nala --install-completion bash
nala --show-completion bash
# Only keep the top 5 fastest mirrors
# sudo nala fetch 1,2,3,4,5

# Install Packages
nala install -y gpg curl accountsservice neofetch sudo network-manager vim net-tools ca-certificates apt-transport-https gnupg

# Aliases
echo "alias ll='ls -la'" >> ~/.bashrc
echo "alias ll='ls -la'" >> /home/$SVR_USER/.bashrc

# Setup non-root user
/sbin/usermod -a -G sudo $SVR_USER
echo "$SVR_USER ALL=(ALL) ALL" >> /etc/sudoers

# Setup Network Manager
echo "managed=true" >> /etc/NetworkManager/NetworkManager.conf
systemctl restart NetworkManager

# Kill the swap space
swapoff -a
sed -i 's_/swap.img_#/swap.img_g' /etc/fstab
(crontab -l 2>/dev/null; echo "@reboot /sbin/swapoff -a") | crontab - || true

####################################  Deviation Begins  ########################################
# Update kernel for CRI
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf 
overlay 
br_netfilter
EOF

sudo modprobe overlay 
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1 
net.bridge.bridge-nf-call-ip6tables = 1 
EOF

# Make above take affect
sysctl --system

####################################  Containerd install  ########################################
nala install -y containerd

# Configure containerd to work with Kubernetes
containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1

####################################  Enable SystemdCgroup for containerd  ########################################
# Edit the file ‘/etc/containerd/config.toml’
# and look for the section
# ‘[plugins.”io.containerd.grpc.v1.cri”.containerd.runtimes.runc.options]’ 
# and change ‘SystemdCgroup = false’ to ‘SystemdCgroup = true‘

systemctl restart containerd
systemctl enable containerd

####################################  Kubernetes install  ########################################

# Add kube repos
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Update to grab k8s repo updates
nala upgrade -y
nala install -y kubelet kubeadm kubectl

# Configure an initial kubelet yaml file for kubeadm
# mkdir workdir
# cd workdir
# vim kubelet.yaml
#
# apiVersion: kubeadm.k8s.io/v1beta3
# kind: InitConfiguration
# ---
# apiVersion: kubeadm.k8s.io/v1beta3
# kind: ClusterConfiguration
# kubernetesVersion: "1.30.0" # Replace with your desired version
# ---
# apiVersion: kubelet.config.k8s.io/v1beta1
# kind: KubeletConfiguration

# Time to init
kubeadm init --config workdir/kubelet.yaml --v 1 | tee /tmp/bootstrap_log

# Quick grab of tokens if you missed it
grep -a1 "kubeadm join" /tmp/bootstrap_log

# Stuff to do after init
# To start using your cluster, you need to run the following as a regular user:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Alternatively, if you are the root user, you can run:
export KUBECONFIG=/etc/kubernetes/admin.conf

# Got these tokens back
#kubeadm join 192.168.242.130:6443 --token qjw9j3.wccprdgjbnolo56f \
#--discovery-token-ca-cert-hash sha256:7e02f57c38b57560b16b9472aa45f6b3092efc7eb9b408556b2eb91fe2da68ad

# Taint all the things; node-role.kubernetes.io/master is deprecated
# REF: https://kubernetes.io/docs/reference/labels-annotations-taints/#node-role-kubernetes-io-control-plane-taint
kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule-


####################################  Cilium (CNI) install  ########################################
# Installs the Cilium CLI tool first before installing the Cilium CNI
# REF: https://docs.cilium.io/en/stable/gettingstarted/k8s-install-default/

# Cilium CLI install
CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
CLI_ARCH=amd64
if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}

# Cilium install
# Note: After running this command it could take a while 
# before Cilium reports as healthy
cilium install --version 1.16.0
cilium status --wait # Grab a snack here...


####################################  Ceph install  ########################################
# TBD...
